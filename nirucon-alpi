#!/bin/bash

# Nirucon-ALPI: Post Install script for Arch Linux
# Version: 2024-08-10
# Author: Nicklas Rudolfsson
# GitHub: https://github.com/nirucon
# Email: n@rudolfsson.net
# License: Feel free to use and modify. Donations are welcome :) https://www.paypal.com/paypalme/nicklasrudolfsson
# Disclaimer and Warning:
# 1. I do not take any responsibility for this script or any changes/problems it might cause on your system!
# 2. I am not a professional programmer, hacker, or tech expert. I am an old n00b who uses Linux as my daily driver and sometimes enjoys tinkering with my setup to make it easier for myself.
# 3. Consider this script a work in progress. But there is a risk that it may not be improved or updated at all, and I cannot offer any guarantees.
# Dependencies: If not listed here - YOU are responsible to look in the script.
# Related scripts: https://github.com/nirucon/nirucon-linux-postinstall (main script)

# Function: Check for internet connection
check_internet_connection() {
    if ping -q -c 1 -W 1 google.com >/dev/null; then
        echo -e "\e[32mInternet connection: OK\e[0m"
    else
        echo -e "\e[31mInternet connection: DOWN\e[0m"
        echo "This script requires an active internet connection. Please resolve the issue and run the script again."
        exit 1
    fi
}

# Function: Display welcome message
display_welcome() {
    clear
    echo -e "\e[1;34mWelcome to the Nirucon-ALPI Post Install script for Arch Linux\e[0m"
    echo -e "\e[1;31mDisclaimer: Use at your own risk. The author does not have any responsibility at all for this script and changes on your system!\e[0m"
    echo "--------------------------------------------------------------------------"
}

# Function: Prompt confirmation to proceed
confirm_proceed() {
    read -p "Are you sure you want to continue with the installation? [Y/n]: " confirm_install
    confirm_install="${confirm_install,,}" # Convert to lowercase
    if [[ "$confirm_install" == "n" ]]; then
        echo "Installation aborted."
        exit 0
    fi
    echo "Proceeding with installation..."
}

# Function: Install necessary packages if not already installed
install_if_needed() {
    if ! command -v "$1" &>/dev/null; then
        echo "Installing $1..."
        sudo pacman -S --needed --noconfirm "$1"
    else
        echo "$1 is already installed"
    fi
}

# Function: Install yay if not already installed
install_yay() {
    if ! command -v yay &>/dev/null; then
        echo "Installing AUR helper yay..."
        sudo pacman -S --needed --noconfirm git base-devel
        git clone https://aur.archlinux.org/yay.git /tmp/yay
        cd /tmp/yay
        makepkg -si
        cd - &>/dev/null
        rm -rf /tmp/yay
    else
        echo "yay is already installed"
    fi
}

# Function: Optimize system settings in pacman.conf
optimize_pacman_conf() {
    local file="/etc/pacman.conf"
    declare -A lines=(
        ["ParallelDownloads=5"]="#ParallelDownloads = 5"
        ["Color"]="#Color"
        ["VerbosePkgLists"]="#VerbosePkgLists"
    )

    ensure_line() {
        local line="$1"
        local comment_line="$2"
        local section="$3"

        if grep -q "\[$section\]" "$file"; then
            if grep -q "^$line" "$file"; then
                echo "Line '$line' already present."
            elif grep -q "^$comment_line" "$file"; then
                echo "Uncommenting '$comment_line' to '$line'."
                sudo sed -i "s/^$comment_line/$line/" "$file"
            else
                echo "Adding '$line' to the section [$section]."
                sudo sed -i "/\[$section\]/a $line" "$file"
            fi
        else
            echo "Section [$section] not found. Adding section and line."
            echo -e "\n[$section]\n$line" | sudo tee -a "$file" >/dev/null
        fi
    }

    ensure_line "ILoveCandy" "#ILoveCandy" "options"
    for line in "${!lines[@]}"; do
        ensure_line "$line" "${lines[$line]}" "options"
    done
    echo "pacman.conf configuration update complete."
}

# Function: Install essential packages via pacman and yay
install_packages() {
    local packages_pacman=(
        xorg-server xorg-xinit xorg-xrandr xorg-xsetroot imlib2
        playerctl qt6ct pcmanfm arandr nitrogen picom openssh cmus scrot gnupg python-pyfiglet
        pass brightnessctl mpv dunst unzip nano alsa-utils pavucontrol xarchiver xclip htop curl
        libnotify jq bc reflector flameshot maim volumeicon vim
    )
    local packages_yay=(
        ttf-font-awesome ttf-mononoki-nerd maim xautolock rofi fastfetch
    )

    echo "Installing essential packages via pacman..."
    sudo pacman -S --needed --noconfirm "${packages_pacman[@]}"

    echo "Installing essential packages via yay..."
    yay -S --noconfirm "${packages_yay[@]}"
}

# Function: Check for btrfs filesystem and install timeshift-autosnap if found
install_timeshift_if_btrfs() {
    if grep -q 'btrfs' /etc/fstab; then
        echo "btrfs filesystem detected. Installing timeshift-autosnap..."
        yay -S --needed --noconfirm timeshift-autosnap
    else
        echo "No btrfs filesystem detected. Skipping timeshift-autosnap installation."
    fi
}

# Function: Install optional packages for Arch Linux
install_optional_packages() {
    declare -a pacman_packages=("thunderbird" "signal-desktop" "nextcloud-client" "irssi" "bluefish" "filezilla" "gimp" "obs-studio" "kdenlive" "realtime-privileges")
    declare -a aur_packages=("brave" "spotify" "reaper" "sws" "reapack" "qpwgraph" "yabridge" "yabridgectl" "pro-audio" "lv2-plugins" "vst-plugins" "vst3-plugins")
    declare -a selected_pacman_packages=()
    declare -a selected_aur_packages=()
    declare package_choice

    echo "Optional Packages Installation"

    read -p "Do you want to install some suggested optional packages and applications? You will be prompted for each install [Y]yes / [n]no? (Yes default on enter): " initial_choice
    initial_choice="${initial_choice,,}" # Convert to lowercase

    if [[ "$initial_choice" =~ ^(yes|y| ) ]] || [[ -z "$initial_choice" ]]; then
        echo "Checking for already installed packages..."

        for package in "${pacman_packages[@]}"; do
            if ! pacman -Qq "$package" &> /dev/null; then
                read -p "Do you want to install $package (official repo)? [Y/n]: " package_choice
                package_choice="${package_choice,,}" # Convert to lowercase
                if [[ "$package_choice" =~ ^(yes|y| ) ]] || [[ -z "$package_choice" ]]; then
                    selected_pacman_packages+=("$package")
                fi
            fi
        done

        for package in "${aur_packages[@]}"; do
            if ! yay -Qq "$package" &> /dev/null; then
                read -p "Do you want to install $package (AUR)? [Y/n]: " package_choice
                package_choice="${package_choice,,}" # Convert to lowercase
                if [[ "$package_choice" =~ ^(yes|y| ) ]] || [[ -z "$package_choice" ]]; then
                    selected_aur_packages+=("$package")
                fi
            fi
        done

        if [[ ${#selected_pacman_packages[@]} -eq 0 ]] && [[ ${#selected_aur_packages[@]} -eq 0 ]]; then
            echo -e "\e[31mNo optional packages selected for installation.\e[0m"
            return
        fi

        echo "These packages will be installed:"
        for package in "${selected_pacman_packages[@]}"; do
            echo "- $package (official repo)"
        done
        for package in "${selected_aur_packages[@]}"; do
            echo "- $package (AUR)"
        done

        while true; do
            read -p "Are you sure you want to install all these? [Y]yes / [n]no / [c]choose again: " final_choice
            final_choice="${final_choice,,}" # Convert to lowercase
            if [[ "$final_choice" =~ ^(yes|y| ) ]] || [[ -z "$final_choice" ]]; then
                if [[ ${#selected_pacman_packages[@]} -gt 0 ]]; then
                    sudo pacman -Syu --noconfirm "${selected_pacman_packages[@]}"
                    echo -e "\e[32mSelected official repo packages installed.\e[0m"
                fi
                if [[ ${#selected_aur_packages[@]} -gt 0 ]]; then
                    yay -Syu --noconfirm "${selected_aur_packages[@]}"
                    echo -e "\e[32mSelected AUR packages installed.\e[0m"
                fi
                break
            elif [[ "$final_choice" == "no" || "$final_choice" == "n" ]]; then
                echo -e "\e[31mInstallation of optional packages aborted.\e[0m"
                break
            elif [[ "$final_choice" == "choose" || "$final_choice" == "c" ]]; then
                install_optional_packages
                break
            else
                echo -e "\e[31mInvalid choice. Please select [Y]yes / [n]no / [c]choose again.\e[0m"
            fi
        done
    else
        echo -e "\e[31mSkipping optional packages installation.\e[0m"
    fi
}


# Function: Clone and install nirucon-suckless and related files, scripts and dot files
install_suckless() {
    read -p "Do you want to install suckless dwm, dmenu, st, slock and related configurations, dotfiles and some dmenu scripts? [Y/n]: " choice
    choice="${choice,,}"
    if [[ "$choice" =~ ^(yes|y| ) ]] || [[ -z "$choice" ]]; then
        echo "Installing Suckless utilities and configurations..."
        mkdir -p ~/Git && git clone https://github.com/nirucon/nirucon-suckless ~/Git/nirucon-suckless
        mkdir -p ~/.config/suckless ~/.dwm ~/Music ~/Downloads ~/Pictures ~/Videos ~/Temp ~/Scripts ~/.config/dunst

        declare -a repos=("nirubar-dwm-arch" "nirucon-cmus-themes" "dunstrc" "nirucon-dmenu" "sverigesradio-dmenu" "srpod-dmenu" "srplay-dmenu" "dwmexit-dmenu" "havamal" "wifi-dmenu" "system-optimizer-dmenu" "nirucon-suckless-modscript")
        for repo in "${repos[@]}"; do
            rm -rf ~/Git/$repo
            git clone https://github.com/nirucon/$repo ~/Git/$repo
        done

        cp -rf ~/Git/nirubar-dwm-arch/ ~/Git/nirucon-suckless/dmenu ~/Git/nirucon-suckless/st ~/Git/nirucon-suckless/slock ~/Git/nirucon-suckless/dwm ~/Git/nirucon-suckless/dwm_systray ~/.config/suckless
        cp -rf ~/Git/dunstrc/* ~/.config/dunst
        cp -rf ~/Git/nirucon-cmus-themes/* ~/.config/cmus
        cp -fr ~/Git/nirucon-suckless/nirucon-greeter ~/.config/
        cp -fr ~/Git/nirucon-suckless/fastfetch ~/.config/
        cp -fr ~/Git/nirucon-suckless-modscript/*sh ~/Scripts
        chmod +x ~/Git/nirucon-suckless-modscript/*sh
        sudo cp -fr ~/Git/nirucon-suckless/fonts/* /usr/share/fonts/

        declare -a suckless_dirs=("dwm_systray" "dmenu" "slock" "st")
        for dir in "${suckless_dirs[@]}"; do
            sudo make -C ~/.config/suckless/$dir clean install
        done

        cp -f ~/Git/nirucon-suckless/.xinitrc ~/
        cp -f ~/Git/nirucon-suckless/autostart.sh ~/.dwm
        cp -f ~/Git/nirucon-suckless/.bashrc ~/
        cp -f ~/Git/nirucon-suckless/.bash_aliases_arch ~/
        cp -rf ~/Git/nirucon-suckless/nirucon-wallpapers ~/Pictures/
        sudo cp -f ~/Git/nirucon-suckless/issue /etc/
        chmod +x ~/.dwm/autostart.sh ~/.config/suckless/nirubar-dwm-arch/nirubar-dwm-arch ~/.config/nirucon-greeter/greeter

        # Insert nirubar-dwm in .xinitrc
        line_to_insert="~/.config/suckless/nirubar-dwm-arch/nirubar-dwm-arch &"
        comment_line="# Start nirubar-dwm-*"
        if [[ -f ~/.xinitrc ]]; then
            sed -i "/$comment_line/a $line_to_insert" ~/.xinitrc
            echo "Line inserted successfully."
        else
            echo "~/.xinitrc not found. Please ensure you have the file in your home directory."
        fi

        # nirucon-dmenu - dmenu scripts launcher
        echo "Cloning and installing the 'nirucon-dmenu' script..."
        rm -rf ~/Git/nirucon-dmenu
        git clone https://github.com/nirucon/nirucon-dmenu ~/Git/nirucon-dmenu
        sudo cp -f ~/Git/nirucon-dmenu/nirucon-dmenu-scripts-launcher /usr/local/bin/
        sudo chmod +x /usr/local/bin/nirucon-dmenu-scripts-launcher

        # sverigesradio-dmenu - dmenu script for sveriges radio
        echo "Cloning and installing the 'sverigesradio-dmenu' script..."
        rm -rf ~/Git/sverigesradio-dmenu
        git clone https://github.com/nirucon/sverigesradio-dmenu ~/Git/sverigesradio-dmenu
        sudo cp -f ~/Git/sverigesradio-dmenu/sverigesradio-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/sverigesradio-dmenu

        # srpod-dmenu - dmenu script for sr play pod
        echo "Cloning and installing the 'srpod-dmenu' script..."
        rm -rf ~/Git/srpod-dmenu
        git clone https://github.com/nirucon/srpod-dmenu ~/Git/srpod-dmenu
        sudo cp -f ~/Git/srpod-dmenu/srpod-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/srpod-dmenu

        # srplay-dmenu - dmenu script for sr play podcasts and radio
        echo "Cloning and installing the 'srplay-dmenu' script..."
        rm -rf ~/Git/srplay-dmenu
        git clone https://github.com/nirucon/srplay-dmenu ~/Git/srplay-dmenu
        sudo cp -f ~/Git/srplay-dmenu/srplay-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/srplay-dmenu

        # dwmexit-dmenu - dmenu script for suspend, logout, restart, reboot
        echo "Installing dwmexit-dmenu script..."
        rm -rf ~/Git/dwmexit-dmenu
        git clone https://github.com/nirucon/dwmexit-dmenu ~/Git/dwmexit-dmenu
        sudo cp -f ~/Git/dwmexit-dmenu/dwmexit-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/dwmexit-dmenu

        # havamal - script for random quotes in .bashrc
        echo "Installing havamal script..."
        rm -rf ~/Git/havamal
        git clone https://github.com/nirucon/havamal ~/Git/havamal
        mkdir -p ~/.config/havamal
        cp -fr ~/Git/havamal/* ~/.config/havamal/
        chmod +x ~/.config/havamal/havamal

        # wifi-dmenu - script for wifi in dmenu
        echo "Installing wifi-dmenu script..."
        rm -rf ~/Git/wifi-dmenu
        git clone https://github.com/nirucon/wifi-dmenu ~/Git/wifi-dmenu
        sudo cp -f ~/Git/wifi-dmenu/wifi-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/wifi-dmenu

        # system-optimizer-dmenu - script for optimizing system in dmenu
        echo "Installing system-optimizer-dmenu script..."
        rm -rf ~/Git/system-optimizer-dmenu
        git clone https://github.com/nirucon/system-optimizer-dmenu ~/Git/system-optimizer-dmenu
        sudo cp -f ~/Git/system-optimizer-dmenu/system-optimizer-dmenu /usr/local/bin/
        sudo chmod +x /usr/local/bin/system-optimizer-dmenu

        echo "Suckless utilities and configurations installed successfully."
        rm -rf ~/Git/nirucon-suckless ~/Git/nirucon-cmus-themes ~/Git/dunstrc ~/Git/nirubar-dwm-arch ~/Git/nirucon-dmenu ~/Git/sverigesradio-dmenu ~/Git/srpod-dmenu ~/Git/srplay-dmenu ~/Git/dwmexit-dmenu ~/Git/havamal ~/Git/wifi-dmenu ~/Git/system-optimizer-dmenu ~/Git/nirucon-suckless-modscript
    else
        echo "Skipping Suckless utilities installation."
    fi
}

# Function: Optional theming
install_theming() {
    read -r -p "Do you want to install themes etc? You will be prompted for each install option [Y/n]? (Yes default on enter): " response
    response=${response,,}

    if [[ "$response" =~ ^(yes|y| ) ]] || [[ -z "$response" ]]; then
        read -r -p "Do you want to install GTK Theme Graphite (Dark)? [Y/n]: " gtk_response
        gtk_response=${gtk_response,,}

        read -r -p "Do you want to install Tela Circle Icons? [Y/n]: " icons_response
        icons_response=${icons_response,,}

        read -r -p "Do you want to install Rofi (nirucon custom theme)? [Y/n]: " rofi_response
        rofi_response=${rofi_response,,}
        
        read -r -p "Do you want to install a custom Grub theme (nirucon-death)? [Y/n]: " grub_response
        grub_response=${grub_response,,}

        if [[ "$gtk_response" =~ ^(yes|y| ) ]] || [[ -z "$gtk_response" ]]; then
            echo "Installing Graphite GTK theme (Dark)..."
            git clone https://github.com/vinceliuice/Graphite-gtk-theme /tmp/Graphite-gtk-theme
            cd /tmp/Graphite-gtk-theme
            sudo ./install.sh -d /usr/share/themes -c dark
            cd - &>/dev/null
            rm -rf /tmp/Graphite-gtk-theme
        else
            echo "Skipping GTK theme installation."
        fi

        if [[ "$icons_response" =~ ^(yes|y| ) ]] || [[ -z "$icons_response" ]]; then
            echo "Installing Tela Circle icon theme (Black)..."
            git clone https://github.com/vinceliuice/Tela-circle-icon-theme /tmp/Tela-circle-icon-theme
            cd /tmp/Tela-circle-icon-theme
            sudo ./install.sh -a
            cd - &>/dev/null
            rm -rf /tmp/Tela-circle-icon-theme
        else
            echo "Skipping Tela Circle icon theme installation."
        fi

        if [[ "$gtk_response" =~ ^(yes|y| ) ]] || [[ -z "$gtk_response" ]] || [[ "$icons_response" =~ ^(yes|y| ) ]] || [[ -z "$icons_response" ]]; then
            echo "Ensuring themes and icons are correctly set in the configuration files..."
            mkdir -p ~/.config/gtk-3.0/
            mkdir -p ~/.config/gtk-4.0/

            # GTK2 settings
            echo 'gtk-theme-name="Graphite-Dark"' > ~/.gtkrc-2.0
            echo 'gtk-icon-theme-name="Tela-circle-black"' >> ~/.gtkrc-2.0

            # GTK3 settings
            cat <<EOF > ~/.config/gtk-3.0/settings.ini
[Settings]
gtk-theme-name=Graphite-Dark
gtk-icon-theme-name=Tela-circle-black
EOF

            # GTK4 settings
            cat <<EOF > ~/.config/gtk-4.0/settings.ini
[Settings]
gtk-theme-name=Graphite-Dark
gtk-icon-theme-name=Tela-circle-black
EOF

            # Insert environment variables into .xinitrc
            if ! grep -q 'export GTK_THEME="Graphite-Dark"' ~/.xinitrc; then
                sed -i '/# Set default GTK and Icon themes/a \
export GTK_THEME="Graphite-Dark" \
export GTK_ICON_THEME="Tela-circle-black" \
export GTK2_RC_FILES="$HOME/.gtkrc-2.0" \
export GTK3_SETTINGS="$HOME/.config/gtk-3.0/settings.ini" \
export GTK4_SETTINGS="$HOME/.config/gtk-4.0/settings.ini"' ~/.xinitrc
            fi

            echo "Theme set to Graphite-Dark and icon theme set to Tela-circle-black."
        fi

        if [[ "$rofi_response" =~ ^(yes|y| ) ]] || [[ -z "$rofi_response" ]]; then
            echo "Installing and setting the Rofi custom theme..."
            sudo mkdir -p /usr/share/rofi/themes
            mkdir -p ~/.config/rofi

            wget -O /tmp/nirucon.rasi https://raw.githubusercontent.com/nirucon/nirucon-rofi/master/nirucon.rasi
            sudo mv -f /tmp/nirucon.rasi /usr/share/rofi/themes/
            wget -O /tmp/config.rasi https://raw.githubusercontent.com/nirucon/nirucon-rofi/master/config.rasi
            mv -f /tmp/config.rasi ~/.config/rofi/config.rasi
        else
            echo "Skipping Rofi custom theme installation."
        fi

        if [[ "$grub_response" =~ ^(yes|y| ) ]] || [[ -z "$grub_response" ]]; then
            echo "Installing custom grub theme..."
            git clone https://github.com/nirucon/nirucon-death-grubtheme /tmp/nirucon-death-grubtheme
            sudo mkdir -p /boot/grub/themes
            sudo cp -r /tmp/nirucon-death-grubtheme/nirucon-death /boot/grub/themes/nirucon-death
            sudo sed -i 's|^#GRUB_THEME=.*|GRUB_THEME="/boot/grub/themes/nirucon-death/theme.txt"|' /etc/default/grub
            sudo grub-mkconfig -o /boot/grub/grub.cfg
            echo "Custom grub theme installed."
            rm -rf /tmp/nirucon-death-grubtheme
        else
            echo "Skipping custom grub theme installation."
        fi
    else
        echo "Skipping themes and icons installation."
    fi
}

# Function: Add user to realtime group if not already added
configure_realtime_group() {
    if grep -q "^realtime:" /etc/group; then
        echo "Realtime group already exists."
    else
        echo "Creating realtime group..."
        sudo groupadd realtime
    fi

    if id -nG "$USER" | grep -qw "realtime"; then
        echo "User is already a member of the realtime group."
    else
        echo "Adding user to the realtime group..."
        sudo usermod -a -G realtime $USER
    fi
}

# Check PipeWire
check_pipewire_reaper() {
    # Function to check if PipeWire is installed
    is_pipewire_installed() {
        if pacman -Q pipewire &> /dev/null; then
            return 0
        else
            return 1
        fi
    }

    # Clone the repository and copy files if PipeWire is installed
    if is_pipewire_installed; then
        echo "PipeWire is installed. Cloning the repository and copying files..."

        # Create a temporary directory for cloning the repository
        temp_dir=$(mktemp -d)
        git clone https://github.com/nirucon/reaper-pipewire "$temp_dir"

        # Check if cloning was successful
        if [ $? -ne 0 ]; then
            echo "Failed to clone the repository."
            return 1
        fi

        # Copy the reaper-pipewire-* files to /usr/local/bin/ and make them executable
        sudo cp "$temp_dir/reaper-pipewire-"* /usr/local/bin/
        sudo chmod +x /usr/local/bin/reaper-pipewire-*

        # Clean up the temporary directory
        rm -rf "$temp_dir"

        echo "Files copied and made executable successfully."
    else
        echo "PipeWire is not installed. Continuing with the rest of the script..."
    fi

    return 0
}

# Photogimp
install_photogimp() {
    # Check if GIMP is installed
    if ! command -v gimp &> /dev/null; then
        echo "GIMP is not installed. Please install GIMP and try again."
        exit 1
    fi

    # Check if GIMP has been started at least once
    GIMP_CONFIG_DIR="$HOME/.config/GIMP/2.10"
    if [ ! -d "$GIMP_CONFIG_DIR" ]; then
        echo "GIMP has not been started before. Launching GIMP..."
        gimp &  # Start GIMP in the background
        sleep 10  # Give GIMP some time to start and initialize the config directory
        pkill gimp  # Close GIMP after initialization
        echo "GIMP has been initialized and closed."
    fi

    # Download the PhotoGIMP patch
    local url="https://github.com/Diolinux/PhotoGIMP/archive/master.zip"
    local zip_path="/tmp/PhotoGIMP.zip"
    echo "Downloading PhotoGIMP..."
    curl -L "$url" -o "$zip_path"
    echo "PhotoGIMP download complete."

    # Unzip the PhotoGIMP patch
    local extract_dir="/tmp/PhotoGIMP-master"
    echo "Unzipping PhotoGIMP..."
    unzip "$zip_path" -d "/tmp/"
    echo "Unzipping complete."

    # Apply the PhotoGIMP patch
    local photogimp_dir="$extract_dir/.var/app/org.gimp.GIMP/config/GIMP/2.10"
    if [ -d "$photogimp_dir" ]; then
        echo "Applying PhotoGIMP patch..."
        mkdir -p "$GIMP_CONFIG_DIR"
        cp -r "$photogimp_dir/"* "$GIMP_CONFIG_DIR/"
        echo "PhotoGIMP patch applied successfully."
    else
        echo "PhotoGIMP patch directory not found."
    fi

    # Clean up temporary files
    echo "Cleaning up..."
    rm -rf "$zip_path" "$extract_dir"
    echo "Cleanup complete."
    echo "PhotoGIMP has been successfully installed!"
}

# Main function to execute the script
main() {
    display_welcome
    check_internet_connection
    confirm_proceed

    install_if_needed "git"
    install_if_needed "wget"
    sudo pacman -S --needed --noconfirm base-devel
    install_yay

    read -p "Do you want to optimize and update the system before installing additional applications? [Y/n]: " optimize_choice
    optimize_choice="${optimize_choice,,}"
    if [[ "$optimize_choice" =~ ^(yes|y| ) ]] || [[ -z "$optimize_choice" ]]; then
        optimize_pacman_conf
        sudo pacman -S --needed --noconfirm pacman-contrib
        sudo systemctl enable paccache.timer
        sudo pacman -Syu
    fi

    install_packages
    install_timeshift_if_btrfs
    install_optional_packages

    # Add user to the realtime group if DAW apps and realtime-privileges are installed
    if pacman -Qi reaper &>/dev/null && pacman -Qi realtime-privileges &>/dev/null; then
        configure_realtime_group
    fi

    install_suckless
    install_theming
    check_pipewire_reaper
    install_photogimp

    echo "Cleaning up temporary files..."
    rm -fr /tmp/nirucon-death-grubtheme /tmp/Graphite-gtk-theme /tmp/Tela-circle-icon-theme

    read -p "Nirucon-ALPI is now installed, start with: startx, but it's very recommended to reboot, do you want to reboot now? [Y/n]: " reboot_choice
    reboot_choice="${reboot_choice,,}"
    if [[ "$reboot_choice" =~ ^(yes|y| ) ]] || [[ -z "$reboot_choice" ]]; then
        sudo reboot
    fi
}

main
